"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
/**
 * @api public
 * @class CraiyonImage
 * @classdesc Represents a single image from a Craiyon image generation output.
 */
class CraiyonImage {
    /**
     * @constructor
     * @param {string} base64 The base64-encoded image data.
     */
    constructor(base64) {
        this.base64 = base64.replace(/\n/g, '');
    }
    /**
     * Will return the base64 representation of the image.
     *
     * @returns {string} The base64-encoded string.
     */
    asBase64() {
        return this.base64;
    }
    /**
     * Will create a buffer from the base64 representation of the image.
     *
     * @returns {Buffer} The buffer containing the image data.
     */
    asBuffer() {
        return Buffer.from(this.base64, 'base64');
    }
    /**
     * Will write the image to the given path asynchronously.
     *
     * @param {string} path The path to write the image to.
     */
    async saveToFile(path) {
        await fs.promises.writeFile(path, this.asBuffer());
    }
    /**
     * Will write the image to the given path synchronously.
     *
     * @param {string} path The path to write the image to.
     */
    saveToFileSync(path) {
        fs.writeFileSync(path, this.asBuffer());
    }
    /**
     * Will create a read stream from the image.
     *
     * @returns {Readable} The readable stream.
     */
    stream() {
        return fs.createReadStream(this.asBuffer());
    }
}
exports.default = CraiyonImage;
