"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CraiyonModel = void 0;
const axios_1 = __importDefault(require("axios"));
const CraiyonOutput_1 = __importDefault(require("../models/CraiyonOutput"));
const sleep_1 = __importDefault(require("../utils/sleep"));
/**
 * Contains the different models Craiyon can use for its drawing.
 * @enum
 */
var CraiyonModel;
(function (CraiyonModel) {
    CraiyonModel["None"] = "none";
    CraiyonModel["Art"] = "art";
    CraiyonModel["Drawing"] = "drawing";
    CraiyonModel["Photo"] = "photo";
})(CraiyonModel = exports.CraiyonModel || (exports.CraiyonModel = {}));
/**
 * @api public
 * @class CraiyonClient
 * @classdesc An API client for Craiyon.
 */
class Client {
    constructor() {
        this.baseUrl = 'https://api.craiyon.com';
        this.maxRetries = 3;
        this.apiToken = undefined;
        this.modelVersion = '35s5hfwn9n78gb06';
    }
    /**
     * A builder function that sets the base URL of the Craiyon backend instance.
     *
     * @param baseUrl The base URL to use. Must not include the `/draw`
     *                endpoint.
     * @returns {CraiyonClient} The modified client instance.
     */
    withBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    /**
     * A builder function that sets the maximum number of retries to attempt.
     *
     * @param maxRetries The maximum number of retries to attempt.
     * @returns {CraiyonClient} The modified client instance.
     */
    withMaxRetries(maxRetries) {
        this.maxRetries = maxRetries;
        return this;
    }
    /**
     * A builder function that sets the model version.
     *
     * @param modelVersion The craiyon model to use.
     * @returns {CraiyonClient} The modified client instance.
     */
    withModelVersion(modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }
    /**
     * A builder function that sets the model version.
     *
     * @param modelVersion The craiyon model to use.
     * @returns {CraiyonClient} The modified client instance.
     */
    withApiToken(apiToken) {
        this.apiToken = apiToken;
        return this;
    }
    /**
     * Generates an image for the given prompt. The retries will be throttled by
     * 10 seconds if an HTTP Too Many Requests error is returned.
     *
     * @param {CraiyonOptions} options The options to use for the request.
     * @returns {Promise<CraiyonOutput>} A promise that resolves to the output of
     *                                   the image generation.
     * @throws {Error} If the request fails after the maximum number of retries.
     */
    async generate({ prompt, maxRetries, negative_prompt, model, }) {
        const url = this.makeGenerateImagesUrl();
        const retries = maxRetries !== null && maxRetries !== void 0 ? maxRetries : this.maxRetries;
        model = model !== null && model !== void 0 ? model : CraiyonModel.None;
        negative_prompt = negative_prompt !== null && negative_prompt !== void 0 ? negative_prompt : '';
        const data = {
            prompt,
            version: this.modelVersion,
            token: this.apiToken,
            model,
            negative_prompt,
        };
        try {
            const response = await axios_1.default.post(url, data, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
            });
            const image_responses = await Promise.all(response.data.images.map(async (item) => {
                return await axios_1.default.get(`https://img.craiyon.com/${item}`, {
                    responseType: 'arraybuffer',
                });
            }));
            const output = CraiyonOutput_1.default.fromJSON({
                images: image_responses.map((r) => {
                    return Buffer.from(r.data, 'binary').toString('base64');
                }),
            });
            return output;
        }
        catch (err) {
            if (retries > 0) {
                if (err.response && err.response.status === 429) {
                    await (0, sleep_1.default)(10000);
                }
                return this.generate({
                    prompt,
                    maxRetries: retries - 1,
                    negative_prompt,
                    model,
                });
            }
            throw err;
        }
    }
    makeGenerateImagesUrl() {
        return `${this.baseUrl}${Client.GENERATE_IMAGES_URL}`;
    }
}
Client.GENERATE_IMAGES_URL = '/v3';
Client.VERSION = 3;
Client.MODELS = CraiyonModel;
exports.default = Client;
