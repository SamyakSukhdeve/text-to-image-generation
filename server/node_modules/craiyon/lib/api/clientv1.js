"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const CraiyonOutput_1 = __importDefault(require("../models/CraiyonOutput"));
const sleep_1 = __importDefault(require("../utils/sleep"));
/**
 * @api public
 * @class CraiyonClient
 * @classdesc An API client for Craiyon.
 */
class Client {
    constructor() {
        this.baseUrl = 'https://backend.craiyon.com';
        this.maxRetries = 3;
    }
    /**
     * A builder function that sets the base URL of the Craiyon backend instance.
     *
     * @param baseUrl The base URL to use. Must not include the `/generate`
     *                endpoint.
     * @returns {CraiyonClient} The modified client instance.
     */
    withBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    /**
     * A builder function that sets the maximum number of retries to attempt.
     *
     * @param maxRetries The maximum number of retries to attempt.
     * @returns {CraiyonClient} The modified client instance.
     */
    withMaxRetries(maxRetries) {
        this.maxRetries = maxRetries;
        return this;
    }
    /**
     * Generates an image for the given prompt. The retries will be throttled by
     * 10 seconds if an HTTP Too Many Requests error is returned.
     *
     * @param {CraiyonOptions} options The options to use for the request.
     * @returns {Promise<CraiyonOutput>} A promise that resolves to the output of
     *                                   the image generation.
     * @throws {Error} If the request fails after the maximum number of retries.
     */
    async generate({ prompt, maxRetries, }) {
        const url = this.makeGenerateImagesUrl();
        const retries = maxRetries !== null && maxRetries !== void 0 ? maxRetries : this.maxRetries;
        try {
            const response = await axios_1.default.post(url, { prompt }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
            });
            const output = CraiyonOutput_1.default.fromJSON(response.data);
            return output;
        }
        catch (err) {
            if (retries > 0) {
                if (err.response && err.response.status === 429) {
                    await (0, sleep_1.default)(10000);
                }
                return this.generate({ prompt, maxRetries: retries - 1 });
            }
            throw err;
        }
    }
    makeGenerateImagesUrl() {
        return `${this.baseUrl}${Client.GENERATE_IMAGES_URL}`;
    }
}
Client.GENERATE_IMAGES_URL = '/generate';
Client.VERSION = 1;
exports.default = Client;
